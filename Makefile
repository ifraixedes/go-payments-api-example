GOLANGCI_LINT_VERSION := 1.15.0
PYMT_DB_MIGRATIONS_DIR := payment/sqlite/db-migrations
TEST_DBD := $(realpath ./payment/sqlite)
TEST_DBF := ${TEST_DBD}/svc_test.db

define HELP_MSG
These are the main commands of the repository, they are mostly related with Go
becaues this repository is mainly about an implementation written in Go; for
commands related with the HTTP API definition, go inside of docs/api directory
and execute make inside of it.

Execute one of the following targets:

endef

export HELP_MSG

.PHONY: help
help: ## Show this help
	@echo "$$HELP_MSG"
	@fgrep -h "##" ${MAKEFILE_LIST} | fgrep -v fgrep | sed -e 's/:.*##/:##/' | column -t -s '##'

.PHONY: go-tools-install
go-tools-install: .go-tools-install-ci ## Install Go tools

.PHONY: lint
lint: ## Lint the sources of all the packages contained in this repo
	@.bin/golangci-lint run --enable-all --exclude-use-default=false

.PHONY: test
test: clean .test-db-migrate-run ## Execute the tests in all the packages contained in this repo (runs the clean target at the end)
	@TEST_DB="${TEST_DBF}" go test -race ${TARGS} ./...
	@$(MAKE) --silent clean

.PHONY: clean
clean: ## Remove all the temporary files generated by tests
	@rm -fv ${TEST_DBF}

.PHONY: .test-db-migrate-run
.test-db-migrate-run:
	@$(MAKE) --silent db-migration-run DBF=${TEST_DBF}

.PHONY: db-migration-run
db-migration-run: ## Run the DB migrations on the SQLite3 DB file specified with the DBF env var.
	@.bin/goose -dir=${PYMT_DB_MIGRATIONS_DIR} sqlite3 ${DBF} up

.PHONY: db-migration-create
db-migration-create: ## Create a new DB migration file specified with the O env var.
	@mkdir -p ${PYMT_DB_MIGRATIONS_DIR}
	@.bin/goose -dir=${PYMT_DB_MIGRATIONS_DIR} create ${O} sql

.PHONY: ci
ci: ## Contains the set of checks that the CI runs (can be used for executing in local previous to push code)
	@if [ "$$LINT" = true ]; then make lint; fi
	@if [ "$$COVERAGE" = true ]; then make test TARGS="-v -covermode=atomic -coverprofile=profile.cov"; else make test TARGS="-v"; fi

.PHONY: .go-tools-install-ci
.go-tools-install-ci: .gti-golangci-lint .gti-db-migrations

.PHONY: .gti-golangci-lint
.gti-golangci-lint:
	@mkdir -p .bin
	@curl -sfL https://install.goreleaser.com/github.com/golangci/golangci-lint.sh | sh -s -- -b .bin v${GOLANGCI_LINT_VERSION}

.PHONY: .gti-db-migrations
.gti-db-migrations:
	@GOBIN=$(shell pwd)/.bin go get -u -tags "json1" github.com/pressly/goose/cmd/goose
